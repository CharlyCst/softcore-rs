module SSet = Types.SSet

let call_set =
  SSet.of_list
    [ (*"execute" ;*)
      "CSR"
    ; "MRET"
    ; "SRET"
    ; "ITYPE"
    ; "TEST"
    ; "WFI"
    ; "EBREAK"
    ; "SFENCE_VMA"
    ; "HFENCE_VVMA"
    ; "HFENCE_GVMA"
    ; (* Decoder *)
      "encdec_backwards"
    ; (* Registers *)
      "rX"
    ; "wX"
    ; "is_CSR_defined"
    ; "creg2reg_idx"
    ; (* PMP checks *)
      "pmpCheck"
    ; "pmpWriteAddrReg"
    ; "pmpWriteCfgReg"
    ; (* Trap handling *)
      "trap_handler"
    ; "exception_delegatee"
    ; "exceptionType_to_bits"
    ; "dispatchInterrupt"
    ; "handle_interrupt"
    ; (* CSRs *)
      "read_CSR"
    ; "write_CSR"
    ; "doCSR"
    ; (* System reset *)
      "reset_sys"
    ]
;;

let overwritten_func : SSet.t = SSet.of_list [ "shift_right_arith" ]

let external_func : SSet.t =
  let externals =
    SSet.of_list
      [ "not_implemented"
      ; "print_output"
      ; "format!"
      ; "assert!"
      ; "panic!"
      ; "dec_str"
      ; "hex_str"
      ; "update_subrange_bits"
      ; "zero_extend_16"
      ; "zero_extend_63"
      ; "zero_extend_64"
      ; "sign_extend"
      ; "sail_sign_extend"
      ; "sail_ones"
      ; "min_int"
      ; "__exit"
      ; "signed"
      ; "lteq_int"
      ; "sail_branch_announce"
      ; "bitvector_length"
      ; "bits_str"
      ; "print_reg"
      ; "bitvector_access"
      ; "get_16_random_bits"
      ; "bitvector_concat"
      ; "print_platform"
      ; "cancel_reservation"
      ; "plat_mtval_has_illegal_inst_bits"
      ; "truncate"
      ; "subrange_bits"
      ; "internal_error"
      ; "bitvector_update"
      ; "hex_bits_12_forwards"
      ; "hex_bits_12_backwards"
      ; "sail_zeros"
      ; "parse_hex_bits"
      ; "get_slice_int"
      ; "sub_vec"
      ; "shift_bits_left"
      ; "shift_bits_right"
      ; "quot_round_zero"
      ; "rem_round_zero"
      ]
  in
  SSet.union externals overwritten_func
;;

let unsupported_obj : SSet.t =
  SSet.of_list
    [ (* Used only for side effects, not necessary in the Rust back-end *)
      "csr_name_write_callback"
    ; "csr_id_write_callback"
    ; "csr_full_write_callback"
    ; "long_csr_write_callback"
    ; (* Depend on const generic exprs, would require monomorphisation. *)
      "Mem_write_request"
    ; "PTW_Output"
    ; "PTW_Result"
    ; "pte_bits"
    ; "ppn_bits"
    ; "vpn_bits"
    ]
;;

let unsupported_func : SSet.t =
  SSet.of_list
    [ "translate"
    ; "sail_mem_write"
    ; "write_ram"
    ; "phys_mem_write"
    ; "mem_write_value"
    ; "vmem_write"
    ; "mem_write_ea"
    ; "sail_mem_read"
    ; "read_ram"
    ; "phys_mem_read"
    ; "vmem_read"
    ; "mem_read_callback"
    ; "mem_read"
    ; "translateAddr"
    ; "speculate_conditional"
    ; "print"
    ]
;;

let unsupported_match : SSet.t =
  SSet.of_list
    [ "AMO"
    ; "STORE"
    ; "STORECON"
    ; "LOAD"
    ; "LOADRES"
    ; "RORIW"
    ; "RORI"
    ; "ZBB_RTYPEW"
    ; "ZBB_RTYPE"
    ; "ZBB_EXTOP"
    ; "REV8"
    ; "ORCB"
    ; "CPOP"
    ; "CPOPW"
    ; "CLZ"
    ; "CLZW"
    ; "CTZ"
    ; "CTZW"
    ; "VANDN_VV"
    ; "VANDN_VX"
    ; "VBREV_V"
    ; "VBREV8_V"
    ; "VREV8_V"
    ; "VCLZ_V"
    ; "VCTZ_V"
    ; "VCPOP_V"
    ; "VROL_VV"
    ; "VROL_VX"
    ; "VROR_VV"
    ; "VROR_VX"
    ; "VROR_VI"
    ; "VWSLL_VV"
    ; "VWSLL_VX"
    ; "VWSLL_VI"
    ; "VCLMUL_VV"
    ; "VCLMUL_VX"
    ; "VCLMULH_VV"
    ; "VCLMULH_VX"
    ; "VVTYPE"
    ; "NVSTYPE"
    ; "NVTYPE"
    ; "MASKTYPEV"
    ; "MOVETYPEV"
    ; "VXTYPE"
    ; "NXSTYPE"
    ; "NXTYPE"
    ; "VXSG"
    ; "MASKTYPEX"
    ; "MOVETYPEX"
    ; "VITYPE"
    ; "NISTYPE"
    ; "NITYPE"
    ; "VISG"
    ; "MASKTYPEI"
    ; "MOVETYPEI"
    ; "VMVRTYPE"
    ; "MVVTYPE"
    ; "MVVMATYPE"
    ; "WVVTYPE"
    ; "WVTYPE"
    ; "WMVVTYPE"
    ; "VEXT2TYPE"
    ; "VEXT4TYPE"
    ; "VEXT8TYPE"
    ; "VMVXS"
    ; "MVVCOMPRESS"
    ; "MVXTYPE"
    ; "MVXMATYPE"
    ; "WVXTYPE"
    ; "WXTYPE"
    ; "WMVXTYPE"
    ; "VMVSX"
    ; "RFVVTYPE"
    ; "FVVMTYPE"
    ; "FVFMTYPE"
    ; "FVVTYPE"
    ; "FVVMATYPE"
    ; "FWVVTYPE"
    ; "FWVVMATYPE"
    ; "FWVTYPE"
    ; "VFUNARY0"
    ; "VFWUNARY0"
    ; "VFNUNARY0"
    ; "VFUNARY1"
    ; "VFMVFS"
    ; "FVFTYPE"
    ; "FVFMATYPE"
    ; "FWVFTYPE"
    ; "FWVFMATYPE"
    ; "FWFTYPE"
    ; "VFMERGE"
    ; "VFMV"
    ; "VFMVSF"
    ; "MMTYPE"
    ; "VCPOP_M"
    ; "VFIRST_M"
    ; "VMSBF_M"
    ; "VMSIF_M"
    ; "VMSOF_M"
    ; "VIOTA_M"
    ; "VID_V"
    ; "VLSEGTYPE"
    ; "VLSEGFFTYPE"
    ; "VSSEGTYPE"
    ; "VLSSEGTYPE"
    ; "VSSSEGTYPE"
    ; "VLUXSEGTYPE"
    ; "VLOXSEGTYPE"
    ; "VSUXSEGTYPE"
    ; "VSOXSEGTYPE"
    ; "VLRETYPE"
    ; "VSRETYPE"
    ; "VMTYPE"
    ; "RIVVTYPE"
    ; "RMVVTYPE"
    ; "VVMTYPE"
    ; "VVMCTYPE"
    ; "VVMSTYPE"
    ; "VVCMPTYPE"
    ; "VXMTYPE"
    ; "VXMCTYPE"
    ; "VXMSTYPE"
    ; "VXCMPTYPE"
    ; "VIMTYPE"
    ; "VIMCTYPE"
    ; "VIMSTYPE"
    ; "VICMPTYPE"
    ; "VSETVLI"
    ; "VSETVL"
    ; "VSETIVLI"
    ; "FLI_H"
    ; "FLI_S"
    ; "FLI_D"
    ; "FMINM_H"
    ; "FMAXM_H"
    ; "FMINM_S"
    ; "FMAXM_S"
    ; "FMINM_D"
    ; "FMAXM_D"
    ; "FROUND_H"
    ; "FROUNDNX_H"
    ; "FROUND_S"
    ; "FROUNDNX_S"
    ; "FROUND_D"
    ; "FROUNDNX_D"
    ; "FMVH_X_D"
    ; "FMVP_D_X"
    ; "FLEQ_H"
    ; "FLTQ_H"
    ; "FLEQ_S"
    ; "FLTQ_S"
    ; "FLEQ_D"
    ; "FLTQ_D"
    ; "FCVTMOD_W_D"
    ; "F_BIN_RM_TYPE_H"
    ; "F_MADD_TYPE_H"
    ; "F_BIN_F_TYPE_H"
    ; "F_BIN_X_TYPE_H"
    ; "F_UN_RM_FF_TYPE_H"
    ; "F_UN_RM_FX_TYPE_H"
    ; "F_UN_RM_XF_TYPE_H"
    ; "F_UN_F_TYPE_H"
    ; "F_UN_X_TYPE_H"
    ; "CLMUL"
    ; "CLMULH"
    ; "CLMULR"
    ; "C_FLWSP"
    ; "C_FSWSP"
    ; "C_FLW"
    ; "C_FSW"
    ; "LOAD_FP"
    ; "STORE_FP"
    ; "F_MADD_TYPE_S"
    ; "F_BIN_RM_TYPE_S"
    ; "F_UN_RM_FF_TYPE_S"
    ; "F_UN_RM_FX_TYPE_S"
    ; "F_UN_RM_XF_TYPE_S"
    ; "F_BIN_TYPE_F_S"
    ; "F_BIN_TYPE_X_S"
    ; "F_UN_TYPE_F_S"
    ; "F_UN_TYPE_X_S"
    ; "F_MADD_TYPE_D"
    ; "F_BIN_RM_TYPE_D"
    ; "F_UN_RM_FF_TYPE_D"
    ; "F_UN_RM_XF_TYPE_D"
    ; "F_UN_RM_FX_TYPE_D"
    ; "F_BIN_F_TYPE_D"
    ; "F_BIN_X_TYPE_D"
    ; "F_UN_X_TYPE_D"
    ; "F_UN_F_TYPE_D"
    ; "VSHA2MS_VV"
    ; "ZVKSHA2TYPE"
    ; "VSM3ME_VV"
    ; "VSM3C_VI"
    ; "SHA256SIG0"
    ; "SHA256SIG1"
    ; "SHA256SUM0"
    ; "SHA256SUM1"
    ; "AES32ESMI"
    ; "AES32ESI"
    ; "AES32DSMI"
    ; "AES32DSI"
    ; "SHA512SIG0L"
    ; "SHA512SIG0H"
    ; "SHA512SIG1L"
    ; "SHA512SIG1H"
    ; "SHA512SUM0R"
    ; "SHA512SUM1R"
    ; "AES64KS1I"
    ; "AES64KS2"
    ; "AES64IM"
    ; "AES64ESM"
    ; "AES64ES"
    ; "AES64DSM"
    ; "AES64DS"
    ; "SHA512SIG0"
    ; "SHA512SIG1"
    ; "SHA512SUM0"
    ; "SHA512SUM1"
    ; "ZICBOZ"
    ]
;;

let rv64 : Types.arch_t =
  { call_set
  ; external_func
  ; overwritten_func
  ; unsupported_obj
  ; unsupported_func
  ; unsupported_match
  }
;;
